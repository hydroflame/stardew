import fetch from "node-fetch";
import fs from "fs";
const host = "stardewvalleywiki.com";
const APIPath = "/mediawiki/api.php";
const APIURL = `https://${host}${APIPath}`;

const getPage = async (item: string): Promise<string> => {
  const result = await fetch(
    `${APIURL}?action=query&prop=revisions&titles=${item}&rvslots=*&rvprop=content&formatversion=2&format=json`
  );
  const json = (await result.json()) as any;
  const content = json.query.pages[0].revisions[0].slots.main.content;
  return Promise.resolve(content);
};

const getItemImage = async (item: string): Promise<ArrayBuffer> => {
  const pageResult = await fetch(
    `${APIURL}?action=query&format=json&prop=imageinfo&iiprop=url&titles=File:${item}`
  );
  const json = (await pageResult.json()) as any;
  const url = (Object.values(json.query.pages)[0] as any).imageinfo[0].url;
  const imageResult = await fetch(url);
  const blob = await imageResult.arrayBuffer();
  return Promise.resolve(blob);
};

const scrapeImage = async (item: string): Promise<void> => {
  const path = `src/data/img/${item}`;
  if (fs.existsSync(path)) return;
  const seafoamPudding = await getItemImage(item);
  fs.writeFileSync(path, Buffer.from(new Uint8Array(seafoamPudding)));
};

const main = async (): Promise<void> => {
  const cooking = await getPage("Cooking");
  const recipeRegex = /^{{:([^|]*)|RecipeRow}}$/;
  const recipes = cooking
    .split("\n")
    .map((r) => r.match(recipeRegex)?.at(1))
    .filter((r): r is string => !!r);
  let parsedRecipes: Recipe[] = [];
  for (const recipe of recipes) {
    const recipePage = await getPage(recipe);
    const r = parseRecipe(recipePage);
    scrapeImage(r.Image);
    parsedRecipes.push(r);
  }
  const generateImportName = (s: string): string => {
    s = s.replaceAll(" ", "");
    s = s.replaceAll("'", "");
    return s.replace(".png", "");
  };
  let c = `// This file is autogenerated by scraper.ts
${parsedRecipes
  .map(
    (r) => `import ${generateImportName(r.Image)}Img from "./img/${r.Image}";`
  )
  .join("\n")}
export const Recipes = [${parsedRecipes.map(
    (r) =>
      `{Name:"${r.Name}",Image:${generateImportName(r.Image)}Img,Source:"${
        r.Source
      }",Ingredients:${JSON.stringify(r.Ingredients)}}`
  )}]`;

  fs.writeFileSync("src/data/Recipes.ts", c);
};

main();

interface Ingredient {
  Name: string;
  Amount: number;
}

interface Recipe {
  Name: string;
  Image: string;
  Source: string;
  Ingredients: Ingredient[];
}

const parseRecipe = (pageContent: string): Recipe => {
  // console.log(pageContent);

  const lines = pageContent.split("\n");
  // get image
  const imageContent = lines.find((l) => l.startsWith("|image")) ?? "";
  const image = imageContent.split("=").at(1)?.trim() ?? "";

  // Parse source
  const recipeContent = lines.find((l) => l.startsWith("|recipe")) ?? "";
  let source = recipeContent;
  const channelRegexp = /{{CookingChannel\|([^}]+)}}/;
  const channelMatch = recipeContent?.match(channelRegexp);
  if (channelMatch) {
    source = channelMatch[1];
  }
  const npcRegexp = /{{NPC\|([^|]+)\|Mail - (\d)/;
  const npcMatch = recipeContent?.match(npcRegexp);
  if (npcMatch) {
    source = `${npcMatch[1]} - ${npcMatch[2]} heart`;
  }
  const npcEventRegexp = /{{NPC\|([^|]+)\|(\d)-heart event/;
  const npcEventMatch = recipeContent?.match(npcEventRegexp);
  if (npcEventMatch) {
    source = `${npcEventMatch[1]} - ${npcEventMatch[2]} event`;
  }
  const skillRegexp = /([a-zA-Z]+) Skill Icon/;
  const skillMatch = recipeContent.match(skillRegexp);
  if (skillMatch) {
    const levelMatch = recipeContent.match(/Level \d/);
    source = `${skillMatch[1]} ${levelMatch?.at(1)}`;
  }
  if (recipeContent.includes("Island Trader")) {
    source = "Island Trader";
  }
  if (recipeContent.includes("Resort")) {
    source = "Resort";
  }
  if (recipeContent.includes("Island Trader")) {
    source = "Island Trader";
  }
  if (recipeContent.includes("Volcano")) {
    source = "Volcano";
  }
  if (recipeContent.includes("Saloon")) {
    source = "Saloon";
  }
  if (recipeContent.includes("farmhouse")) {
    source = "Upgrade farmhouse";
  }

  // Parse Ingredients
  const ingredientsContent =
    lines.find((l) => l.startsWith("|ingredients")) ?? "";
  const ingredientRegexp = /{{name\|([^|]+)\|(\d+)}}/g;
  const matches = ingredientsContent.matchAll(ingredientRegexp);
  const ingredients: Ingredient[] = [];
  if (ingredientsContent.includes("Fish.png")) {
    const match = ingredientsContent.match(/Any \[\[Fish\]\] \((\d+)\)/);
    if (match) ingredients.push({ Name: "Fish", Amount: Number(match[1]) });
  }
  if (matches) {
    for (const match of [...matches]) {
      ingredients.push({ Name: match[1], Amount: Number(match[2]) });
    }
  }
  return {
    Name:
      lines
        .find((l) => l.startsWith("|name"))
        ?.split("=")
        ?.at(1)
        ?.trim() ?? "UNKNOWN",
    Image: image,
    Source: source,
    Ingredients: ingredients,
  };
};
